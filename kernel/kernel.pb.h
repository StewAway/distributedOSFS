// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kernel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kernel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kernel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kernel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kernel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kernel_2eproto;
namespace kernel {
class SyscallRequest;
struct SyscallRequestDefaultTypeInternal;
extern SyscallRequestDefaultTypeInternal _SyscallRequest_default_instance_;
class SyscallResponse;
struct SyscallResponseDefaultTypeInternal;
extern SyscallResponseDefaultTypeInternal _SyscallResponse_default_instance_;
}  // namespace kernel
PROTOBUF_NAMESPACE_OPEN
template<> ::kernel::SyscallRequest* Arena::CreateMaybeMessage<::kernel::SyscallRequest>(Arena*);
template<> ::kernel::SyscallResponse* Arena::CreateMaybeMessage<::kernel::SyscallResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kernel {

// ===================================================================

class SyscallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kernel.SyscallRequest) */ {
 public:
  inline SyscallRequest() : SyscallRequest(nullptr) {}
  ~SyscallRequest() override;
  explicit PROTOBUF_CONSTEXPR SyscallRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyscallRequest(const SyscallRequest& from);
  SyscallRequest(SyscallRequest&& from) noexcept
    : SyscallRequest() {
    *this = ::std::move(from);
  }

  inline SyscallRequest& operator=(const SyscallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyscallRequest& operator=(SyscallRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyscallRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyscallRequest* internal_default_instance() {
    return reinterpret_cast<const SyscallRequest*>(
               &_SyscallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyscallRequest& a, SyscallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyscallRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyscallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyscallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyscallRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyscallRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyscallRequest& from) {
    SyscallRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyscallRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kernel.SyscallRequest";
  }
  protected:
  explicit SyscallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kSyscallFieldNumber = 1,
  };
  // repeated string args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // string syscall = 1;
  void clear_syscall();
  const std::string& syscall() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_syscall(ArgT0&& arg0, ArgT... args);
  std::string* mutable_syscall();
  PROTOBUF_NODISCARD std::string* release_syscall();
  void set_allocated_syscall(std::string* syscall);
  private:
  const std::string& _internal_syscall() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_syscall(const std::string& value);
  std::string* _internal_mutable_syscall();
  public:

  // @@protoc_insertion_point(class_scope:kernel.SyscallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr syscall_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kernel_2eproto;
};
// -------------------------------------------------------------------

class SyscallResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kernel.SyscallResponse) */ {
 public:
  inline SyscallResponse() : SyscallResponse(nullptr) {}
  ~SyscallResponse() override;
  explicit PROTOBUF_CONSTEXPR SyscallResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyscallResponse(const SyscallResponse& from);
  SyscallResponse(SyscallResponse&& from) noexcept
    : SyscallResponse() {
    *this = ::std::move(from);
  }

  inline SyscallResponse& operator=(const SyscallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyscallResponse& operator=(SyscallResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyscallResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyscallResponse* internal_default_instance() {
    return reinterpret_cast<const SyscallResponse*>(
               &_SyscallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyscallResponse& a, SyscallResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyscallResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyscallResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyscallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyscallResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyscallResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyscallResponse& from) {
    SyscallResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyscallResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kernel.SyscallResponse";
  }
  protected:
  explicit SyscallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kErrorFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string error = 3;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kernel.SyscallResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kernel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyscallRequest

// string syscall = 1;
inline void SyscallRequest::clear_syscall() {
  _impl_.syscall_.ClearToEmpty();
}
inline const std::string& SyscallRequest::syscall() const {
  // @@protoc_insertion_point(field_get:kernel.SyscallRequest.syscall)
  return _internal_syscall();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyscallRequest::set_syscall(ArgT0&& arg0, ArgT... args) {
 
 _impl_.syscall_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kernel.SyscallRequest.syscall)
}
inline std::string* SyscallRequest::mutable_syscall() {
  std::string* _s = _internal_mutable_syscall();
  // @@protoc_insertion_point(field_mutable:kernel.SyscallRequest.syscall)
  return _s;
}
inline const std::string& SyscallRequest::_internal_syscall() const {
  return _impl_.syscall_.Get();
}
inline void SyscallRequest::_internal_set_syscall(const std::string& value) {
  
  _impl_.syscall_.Set(value, GetArenaForAllocation());
}
inline std::string* SyscallRequest::_internal_mutable_syscall() {
  
  return _impl_.syscall_.Mutable(GetArenaForAllocation());
}
inline std::string* SyscallRequest::release_syscall() {
  // @@protoc_insertion_point(field_release:kernel.SyscallRequest.syscall)
  return _impl_.syscall_.Release();
}
inline void SyscallRequest::set_allocated_syscall(std::string* syscall) {
  if (syscall != nullptr) {
    
  } else {
    
  }
  _impl_.syscall_.SetAllocated(syscall, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.syscall_.IsDefault()) {
    _impl_.syscall_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kernel.SyscallRequest.syscall)
}

// repeated string args = 2;
inline int SyscallRequest::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int SyscallRequest::args_size() const {
  return _internal_args_size();
}
inline void SyscallRequest::clear_args() {
  _impl_.args_.Clear();
}
inline std::string* SyscallRequest::add_args() {
  std::string* _s = _internal_add_args();
  // @@protoc_insertion_point(field_add_mutable:kernel.SyscallRequest.args)
  return _s;
}
inline const std::string& SyscallRequest::_internal_args(int index) const {
  return _impl_.args_.Get(index);
}
inline const std::string& SyscallRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:kernel.SyscallRequest.args)
  return _internal_args(index);
}
inline std::string* SyscallRequest::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:kernel.SyscallRequest.args)
  return _impl_.args_.Mutable(index);
}
inline void SyscallRequest::set_args(int index, const std::string& value) {
  _impl_.args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kernel.SyscallRequest.args)
}
inline void SyscallRequest::set_args(int index, std::string&& value) {
  _impl_.args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kernel.SyscallRequest.args)
}
inline void SyscallRequest::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kernel.SyscallRequest.args)
}
inline void SyscallRequest::set_args(int index, const char* value, size_t size) {
  _impl_.args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kernel.SyscallRequest.args)
}
inline std::string* SyscallRequest::_internal_add_args() {
  return _impl_.args_.Add();
}
inline void SyscallRequest::add_args(const std::string& value) {
  _impl_.args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kernel.SyscallRequest.args)
}
inline void SyscallRequest::add_args(std::string&& value) {
  _impl_.args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kernel.SyscallRequest.args)
}
inline void SyscallRequest::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kernel.SyscallRequest.args)
}
inline void SyscallRequest::add_args(const char* value, size_t size) {
  _impl_.args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kernel.SyscallRequest.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyscallRequest::args() const {
  // @@protoc_insertion_point(field_list:kernel.SyscallRequest.args)
  return _impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyscallRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:kernel.SyscallRequest.args)
  return &_impl_.args_;
}

// -------------------------------------------------------------------

// SyscallResponse

// int32 status = 1;
inline void SyscallResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t SyscallResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t SyscallResponse::status() const {
  // @@protoc_insertion_point(field_get:kernel.SyscallResponse.status)
  return _internal_status();
}
inline void SyscallResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void SyscallResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kernel.SyscallResponse.status)
}

// string result = 2;
inline void SyscallResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& SyscallResponse::result() const {
  // @@protoc_insertion_point(field_get:kernel.SyscallResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyscallResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kernel.SyscallResponse.result)
}
inline std::string* SyscallResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:kernel.SyscallResponse.result)
  return _s;
}
inline const std::string& SyscallResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void SyscallResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* SyscallResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* SyscallResponse::release_result() {
  // @@protoc_insertion_point(field_release:kernel.SyscallResponse.result)
  return _impl_.result_.Release();
}
inline void SyscallResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kernel.SyscallResponse.result)
}

// string error = 3;
inline void SyscallResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& SyscallResponse::error() const {
  // @@protoc_insertion_point(field_get:kernel.SyscallResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyscallResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kernel.SyscallResponse.error)
}
inline std::string* SyscallResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:kernel.SyscallResponse.error)
  return _s;
}
inline const std::string& SyscallResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SyscallResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SyscallResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SyscallResponse::release_error() {
  // @@protoc_insertion_point(field_release:kernel.SyscallResponse.error)
  return _impl_.error_.Release();
}
inline void SyscallResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kernel.SyscallResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kernel

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kernel_2eproto
