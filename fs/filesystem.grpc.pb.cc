// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: filesystem.proto

#include "filesystem.pb.h"
#include "filesystem.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace fs {

static const char* FileSystem_method_names[] = {
  "/fs.FileSystem/Create",
  "/fs.FileSystem/Mkdir",
  "/fs.FileSystem/Open",
  "/fs.FileSystem/Read",
  "/fs.FileSystem/Write",
  "/fs.FileSystem/Seek",
  "/fs.FileSystem/Listdir",
  "/fs.FileSystem/Remove",
};

std::unique_ptr< FileSystem::Stub> FileSystem::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileSystem::Stub> stub(new FileSystem::Stub(channel, options));
  return stub;
}

FileSystem::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(FileSystem_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mkdir_(FileSystem_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Open_(FileSystem_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(FileSystem_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Write_(FileSystem_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Seek_(FileSystem_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Listdir_(FileSystem_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(FileSystem_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileSystem::Stub::Create(::grpc::ClientContext* context, const ::fs::CreateRequest& request, ::fs::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::CreateRequest, ::fs::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void FileSystem::Stub::async::Create(::grpc::ClientContext* context, const ::fs::CreateRequest* request, ::fs::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::CreateRequest, ::fs::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Create(::grpc::ClientContext* context, const ::fs::CreateRequest* request, ::fs::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::CreateResponse>* FileSystem::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::fs::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::CreateResponse, ::fs::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::CreateResponse>* FileSystem::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::fs::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystem::Stub::Mkdir(::grpc::ClientContext* context, const ::fs::MkdirRequest& request, ::fs::MkdirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::MkdirRequest, ::fs::MkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mkdir_, context, request, response);
}

void FileSystem::Stub::async::Mkdir(::grpc::ClientContext* context, const ::fs::MkdirRequest* request, ::fs::MkdirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::MkdirRequest, ::fs::MkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Mkdir(::grpc::ClientContext* context, const ::fs::MkdirRequest* request, ::fs::MkdirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::MkdirResponse>* FileSystem::Stub::PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::fs::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::MkdirResponse, ::fs::MkdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::MkdirResponse>* FileSystem::Stub::AsyncMkdirRaw(::grpc::ClientContext* context, const ::fs::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystem::Stub::Open(::grpc::ClientContext* context, const ::fs::OpenRequest& request, ::fs::OpenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::OpenRequest, ::fs::OpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Open_, context, request, response);
}

void FileSystem::Stub::async::Open(::grpc::ClientContext* context, const ::fs::OpenRequest* request, ::fs::OpenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::OpenRequest, ::fs::OpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Open(::grpc::ClientContext* context, const ::fs::OpenRequest* request, ::fs::OpenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::OpenResponse>* FileSystem::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::fs::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::OpenResponse, ::fs::OpenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Open_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::OpenResponse>* FileSystem::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::fs::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystem::Stub::Read(::grpc::ClientContext* context, const ::fs::ReadRequest& request, ::fs::ReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::ReadRequest, ::fs::ReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Read_, context, request, response);
}

void FileSystem::Stub::async::Read(::grpc::ClientContext* context, const ::fs::ReadRequest* request, ::fs::ReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::ReadRequest, ::fs::ReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Read(::grpc::ClientContext* context, const ::fs::ReadRequest* request, ::fs::ReadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::ReadResponse>* FileSystem::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::fs::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::ReadResponse, ::fs::ReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Read_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::ReadResponse>* FileSystem::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::fs::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystem::Stub::Write(::grpc::ClientContext* context, const ::fs::WriteRequest& request, ::fs::WriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::WriteRequest, ::fs::WriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Write_, context, request, response);
}

void FileSystem::Stub::async::Write(::grpc::ClientContext* context, const ::fs::WriteRequest* request, ::fs::WriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::WriteRequest, ::fs::WriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Write(::grpc::ClientContext* context, const ::fs::WriteRequest* request, ::fs::WriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::WriteResponse>* FileSystem::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::fs::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::WriteResponse, ::fs::WriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Write_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::WriteResponse>* FileSystem::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::fs::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystem::Stub::Seek(::grpc::ClientContext* context, const ::fs::SeekRequest& request, ::fs::SeekResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::SeekRequest, ::fs::SeekResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Seek_, context, request, response);
}

void FileSystem::Stub::async::Seek(::grpc::ClientContext* context, const ::fs::SeekRequest* request, ::fs::SeekResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::SeekRequest, ::fs::SeekResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Seek(::grpc::ClientContext* context, const ::fs::SeekRequest* request, ::fs::SeekResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::SeekResponse>* FileSystem::Stub::PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::fs::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::SeekResponse, ::fs::SeekRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Seek_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::SeekResponse>* FileSystem::Stub::AsyncSeekRaw(::grpc::ClientContext* context, const ::fs::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSeekRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystem::Stub::Listdir(::grpc::ClientContext* context, const ::fs::ListdirRequest& request, ::fs::ListdirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::ListdirRequest, ::fs::ListdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Listdir_, context, request, response);
}

void FileSystem::Stub::async::Listdir(::grpc::ClientContext* context, const ::fs::ListdirRequest* request, ::fs::ListdirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::ListdirRequest, ::fs::ListdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Listdir_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Listdir(::grpc::ClientContext* context, const ::fs::ListdirRequest* request, ::fs::ListdirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Listdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::ListdirResponse>* FileSystem::Stub::PrepareAsyncListdirRaw(::grpc::ClientContext* context, const ::fs::ListdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::ListdirResponse, ::fs::ListdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Listdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::ListdirResponse>* FileSystem::Stub::AsyncListdirRaw(::grpc::ClientContext* context, const ::fs::ListdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileSystem::Stub::Remove(::grpc::ClientContext* context, const ::fs::RemoveRequest& request, ::fs::RemoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::fs::RemoveRequest, ::fs::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void FileSystem::Stub::async::Remove(::grpc::ClientContext* context, const ::fs::RemoveRequest* request, ::fs::RemoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::fs::RemoveRequest, ::fs::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void FileSystem::Stub::async::Remove(::grpc::ClientContext* context, const ::fs::RemoveRequest* request, ::fs::RemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fs::RemoveResponse>* FileSystem::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::fs::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::fs::RemoveResponse, ::fs::RemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Remove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::fs::RemoveResponse>* FileSystem::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::fs::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileSystem::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::CreateRequest, ::fs::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::CreateRequest* req,
             ::fs::CreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::MkdirRequest, ::fs::MkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::MkdirRequest* req,
             ::fs::MkdirResponse* resp) {
               return service->Mkdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::OpenRequest, ::fs::OpenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::OpenRequest* req,
             ::fs::OpenResponse* resp) {
               return service->Open(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::ReadRequest, ::fs::ReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::ReadRequest* req,
             ::fs::ReadResponse* resp) {
               return service->Read(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::WriteRequest, ::fs::WriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::WriteRequest* req,
             ::fs::WriteResponse* resp) {
               return service->Write(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::SeekRequest, ::fs::SeekResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::SeekRequest* req,
             ::fs::SeekResponse* resp) {
               return service->Seek(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::ListdirRequest, ::fs::ListdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::ListdirRequest* req,
             ::fs::ListdirResponse* resp) {
               return service->Listdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::fs::RemoveRequest, ::fs::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileSystem::Service* service,
             ::grpc::ServerContext* ctx,
             const ::fs::RemoveRequest* req,
             ::fs::RemoveResponse* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
}

FileSystem::Service::~Service() {
}

::grpc::Status FileSystem::Service::Create(::grpc::ServerContext* context, const ::fs::CreateRequest* request, ::fs::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Mkdir(::grpc::ServerContext* context, const ::fs::MkdirRequest* request, ::fs::MkdirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Open(::grpc::ServerContext* context, const ::fs::OpenRequest* request, ::fs::OpenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Read(::grpc::ServerContext* context, const ::fs::ReadRequest* request, ::fs::ReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Write(::grpc::ServerContext* context, const ::fs::WriteRequest* request, ::fs::WriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Seek(::grpc::ServerContext* context, const ::fs::SeekRequest* request, ::fs::SeekResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Listdir(::grpc::ServerContext* context, const ::fs::ListdirRequest* request, ::fs::ListdirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::Remove(::grpc::ServerContext* context, const ::fs::RemoveRequest* request, ::fs::RemoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fs

