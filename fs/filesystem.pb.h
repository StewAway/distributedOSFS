// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filesystem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_filesystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_filesystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_filesystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_filesystem_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_filesystem_2eproto;
namespace fs {
class CreateResponse;
struct CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class FileRequest;
struct FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class ListdirResponse;
struct ListdirResponseDefaultTypeInternal;
extern ListdirResponseDefaultTypeInternal _ListdirResponse_default_instance_;
class MkdirResponse;
struct MkdirResponseDefaultTypeInternal;
extern MkdirResponseDefaultTypeInternal _MkdirResponse_default_instance_;
class MountRequest;
struct MountRequestDefaultTypeInternal;
extern MountRequestDefaultTypeInternal _MountRequest_default_instance_;
class MountResponse;
struct MountResponseDefaultTypeInternal;
extern MountResponseDefaultTypeInternal _MountResponse_default_instance_;
class OpenResponse;
struct OpenResponseDefaultTypeInternal;
extern OpenResponseDefaultTypeInternal _OpenResponse_default_instance_;
class ReadRequestMulti;
struct ReadRequestMultiDefaultTypeInternal;
extern ReadRequestMultiDefaultTypeInternal _ReadRequestMulti_default_instance_;
class ReadResponse;
struct ReadResponseDefaultTypeInternal;
extern ReadResponseDefaultTypeInternal _ReadResponse_default_instance_;
class RemoveResponse;
struct RemoveResponseDefaultTypeInternal;
extern RemoveResponseDefaultTypeInternal _RemoveResponse_default_instance_;
class SeekRequestMulti;
struct SeekRequestMultiDefaultTypeInternal;
extern SeekRequestMultiDefaultTypeInternal _SeekRequestMulti_default_instance_;
class SeekResponse;
struct SeekResponseDefaultTypeInternal;
extern SeekResponseDefaultTypeInternal _SeekResponse_default_instance_;
class WriteRequestMulti;
struct WriteRequestMultiDefaultTypeInternal;
extern WriteRequestMultiDefaultTypeInternal _WriteRequestMulti_default_instance_;
class WriteResponse;
struct WriteResponseDefaultTypeInternal;
extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace fs
PROTOBUF_NAMESPACE_OPEN
template<> ::fs::CreateResponse* Arena::CreateMaybeMessage<::fs::CreateResponse>(Arena*);
template<> ::fs::FileRequest* Arena::CreateMaybeMessage<::fs::FileRequest>(Arena*);
template<> ::fs::ListdirResponse* Arena::CreateMaybeMessage<::fs::ListdirResponse>(Arena*);
template<> ::fs::MkdirResponse* Arena::CreateMaybeMessage<::fs::MkdirResponse>(Arena*);
template<> ::fs::MountRequest* Arena::CreateMaybeMessage<::fs::MountRequest>(Arena*);
template<> ::fs::MountResponse* Arena::CreateMaybeMessage<::fs::MountResponse>(Arena*);
template<> ::fs::OpenResponse* Arena::CreateMaybeMessage<::fs::OpenResponse>(Arena*);
template<> ::fs::ReadRequestMulti* Arena::CreateMaybeMessage<::fs::ReadRequestMulti>(Arena*);
template<> ::fs::ReadResponse* Arena::CreateMaybeMessage<::fs::ReadResponse>(Arena*);
template<> ::fs::RemoveResponse* Arena::CreateMaybeMessage<::fs::RemoveResponse>(Arena*);
template<> ::fs::SeekRequestMulti* Arena::CreateMaybeMessage<::fs::SeekRequestMulti>(Arena*);
template<> ::fs::SeekResponse* Arena::CreateMaybeMessage<::fs::SeekResponse>(Arena*);
template<> ::fs::WriteRequestMulti* Arena::CreateMaybeMessage<::fs::WriteRequestMulti>(Arena*);
template<> ::fs::WriteResponse* Arena::CreateMaybeMessage<::fs::WriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fs {

// ===================================================================

class MountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.MountRequest) */ {
 public:
  inline MountRequest() : MountRequest(nullptr) {}
  ~MountRequest() override;
  explicit PROTOBUF_CONSTEXPR MountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountRequest(const MountRequest& from);
  MountRequest(MountRequest&& from) noexcept
    : MountRequest() {
    *this = ::std::move(from);
  }

  inline MountRequest& operator=(const MountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountRequest& operator=(MountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountRequest* internal_default_instance() {
    return reinterpret_cast<const MountRequest*>(
               &_MountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MountRequest& a, MountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MountRequest& from) {
    MountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.MountRequest";
  }
  protected:
  explicit MountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiskImageFieldNumber = 1,
  };
  // string disk_image = 1;
  void clear_disk_image();
  const std::string& disk_image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_disk_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_disk_image();
  PROTOBUF_NODISCARD std::string* release_disk_image();
  void set_allocated_disk_image(std::string* disk_image);
  private:
  const std::string& _internal_disk_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_disk_image(const std::string& value);
  std::string* _internal_mutable_disk_image();
  public:

  // @@protoc_insertion_point(class_scope:fs.MountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disk_image_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class MountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.MountResponse) */ {
 public:
  inline MountResponse() : MountResponse(nullptr) {}
  ~MountResponse() override;
  explicit PROTOBUF_CONSTEXPR MountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountResponse(const MountResponse& from);
  MountResponse(MountResponse&& from) noexcept
    : MountResponse() {
    *this = ::std::move(from);
  }

  inline MountResponse& operator=(const MountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountResponse& operator=(MountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountResponse* internal_default_instance() {
    return reinterpret_cast<const MountResponse*>(
               &_MountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MountResponse& a, MountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MountResponse& from) {
    MountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.MountResponse";
  }
  protected:
  explicit MountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kMountIdFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 mount_id = 1;
  void clear_mount_id();
  int32_t mount_id() const;
  void set_mount_id(int32_t value);
  private:
  int32_t _internal_mount_id() const;
  void _internal_set_mount_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.MountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int32_t mount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class FileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.FileRequest) */ {
 public:
  inline FileRequest() : FileRequest(nullptr) {}
  ~FileRequest() override;
  explicit PROTOBUF_CONSTEXPR FileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileRequest(const FileRequest& from);
  FileRequest(FileRequest&& from) noexcept
    : FileRequest() {
    *this = ::std::move(from);
  }

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileRequest& operator=(FileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
               &_FileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileRequest& a, FileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileRequest& from) {
    FileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.FileRequest";
  }
  protected:
  explicit FileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kMountIdFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 mount_id = 1;
  void clear_mount_id();
  int32_t mount_id() const;
  void set_mount_id(int32_t value);
  private:
  int32_t _internal_mount_id() const;
  void _internal_set_mount_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.FileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    int32_t mount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.CreateResponse) */ {
 public:
  inline CreateResponse() : CreateResponse(nullptr) {}
  ~CreateResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateResponse& from) {
    CreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.CreateResponse";
  }
  protected:
  explicit CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kInumFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 inum = 1;
  void clear_inum();
  int32_t inum() const;
  void set_inum(int32_t value);
  private:
  int32_t _internal_inum() const;
  void _internal_set_inum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.CreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int32_t inum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class MkdirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.MkdirResponse) */ {
 public:
  inline MkdirResponse() : MkdirResponse(nullptr) {}
  ~MkdirResponse() override;
  explicit PROTOBUF_CONSTEXPR MkdirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MkdirResponse(const MkdirResponse& from);
  MkdirResponse(MkdirResponse&& from) noexcept
    : MkdirResponse() {
    *this = ::std::move(from);
  }

  inline MkdirResponse& operator=(const MkdirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MkdirResponse& operator=(MkdirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MkdirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MkdirResponse* internal_default_instance() {
    return reinterpret_cast<const MkdirResponse*>(
               &_MkdirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MkdirResponse& a, MkdirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MkdirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MkdirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MkdirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MkdirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MkdirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MkdirResponse& from) {
    MkdirResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MkdirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.MkdirResponse";
  }
  protected:
  explicit MkdirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kInumFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 inum = 1;
  void clear_inum();
  int32_t inum() const;
  void set_inum(int32_t value);
  private:
  int32_t _internal_inum() const;
  void _internal_set_inum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.MkdirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int32_t inum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class OpenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.OpenResponse) */ {
 public:
  inline OpenResponse() : OpenResponse(nullptr) {}
  ~OpenResponse() override;
  explicit PROTOBUF_CONSTEXPR OpenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenResponse(const OpenResponse& from);
  OpenResponse(OpenResponse&& from) noexcept
    : OpenResponse() {
    *this = ::std::move(from);
  }

  inline OpenResponse& operator=(const OpenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenResponse& operator=(OpenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenResponse* internal_default_instance() {
    return reinterpret_cast<const OpenResponse*>(
               &_OpenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpenResponse& a, OpenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OpenResponse& from) {
    OpenResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.OpenResponse";
  }
  protected:
  explicit OpenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kFdFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 fd = 1;
  void clear_fd();
  int32_t fd() const;
  void set_fd(int32_t value);
  private:
  int32_t _internal_fd() const;
  void _internal_set_fd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.OpenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int32_t fd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class ReadRequestMulti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.ReadRequestMulti) */ {
 public:
  inline ReadRequestMulti() : ReadRequestMulti(nullptr) {}
  ~ReadRequestMulti() override;
  explicit PROTOBUF_CONSTEXPR ReadRequestMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRequestMulti(const ReadRequestMulti& from);
  ReadRequestMulti(ReadRequestMulti&& from) noexcept
    : ReadRequestMulti() {
    *this = ::std::move(from);
  }

  inline ReadRequestMulti& operator=(const ReadRequestMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequestMulti& operator=(ReadRequestMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRequestMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRequestMulti* internal_default_instance() {
    return reinterpret_cast<const ReadRequestMulti*>(
               &_ReadRequestMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadRequestMulti& a, ReadRequestMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequestMulti* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRequestMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRequestMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRequestMulti>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRequestMulti& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRequestMulti& from) {
    ReadRequestMulti::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequestMulti* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.ReadRequestMulti";
  }
  protected:
  explicit ReadRequestMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountIdFieldNumber = 1,
    kFdFieldNumber = 2,
    kNumBytesFieldNumber = 3,
  };
  // int32 mount_id = 1;
  void clear_mount_id();
  int32_t mount_id() const;
  void set_mount_id(int32_t value);
  private:
  int32_t _internal_mount_id() const;
  void _internal_set_mount_id(int32_t value);
  public:

  // int32 fd = 2;
  void clear_fd();
  int32_t fd() const;
  void set_fd(int32_t value);
  private:
  int32_t _internal_fd() const;
  void _internal_set_fd(int32_t value);
  public:

  // int32 num_bytes = 3;
  void clear_num_bytes();
  int32_t num_bytes() const;
  void set_num_bytes(int32_t value);
  private:
  int32_t _internal_num_bytes() const;
  void _internal_set_num_bytes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.ReadRequestMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t mount_id_;
    int32_t fd_;
    int32_t num_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class ReadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.ReadResponse) */ {
 public:
  inline ReadResponse() : ReadResponse(nullptr) {}
  ~ReadResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadResponse(const ReadResponse& from);
  ReadResponse(ReadResponse&& from) noexcept
    : ReadResponse() {
    *this = ::std::move(from);
  }

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResponse& operator=(ReadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadResponse* internal_default_instance() {
    return reinterpret_cast<const ReadResponse*>(
               &_ReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadResponse& a, ReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadResponse& from) {
    ReadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.ReadResponse";
  }
  protected:
  explicit ReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:fs.ReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class WriteRequestMulti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.WriteRequestMulti) */ {
 public:
  inline WriteRequestMulti() : WriteRequestMulti(nullptr) {}
  ~WriteRequestMulti() override;
  explicit PROTOBUF_CONSTEXPR WriteRequestMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRequestMulti(const WriteRequestMulti& from);
  WriteRequestMulti(WriteRequestMulti&& from) noexcept
    : WriteRequestMulti() {
    *this = ::std::move(from);
  }

  inline WriteRequestMulti& operator=(const WriteRequestMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequestMulti& operator=(WriteRequestMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRequestMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRequestMulti* internal_default_instance() {
    return reinterpret_cast<const WriteRequestMulti*>(
               &_WriteRequestMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WriteRequestMulti& a, WriteRequestMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequestMulti* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequestMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRequestMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRequestMulti>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRequestMulti& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteRequestMulti& from) {
    WriteRequestMulti::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequestMulti* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.WriteRequestMulti";
  }
  protected:
  explicit WriteRequestMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kMountIdFieldNumber = 1,
    kFdFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 mount_id = 1;
  void clear_mount_id();
  int32_t mount_id() const;
  void set_mount_id(int32_t value);
  private:
  int32_t _internal_mount_id() const;
  void _internal_set_mount_id(int32_t value);
  public:

  // int32 fd = 2;
  void clear_fd();
  int32_t fd() const;
  void set_fd(int32_t value);
  private:
  int32_t _internal_fd() const;
  void _internal_set_fd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.WriteRequestMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t mount_id_;
    int32_t fd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class WriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.WriteResponse) */ {
 public:
  inline WriteResponse() : WriteResponse(nullptr) {}
  ~WriteResponse() override;
  explicit PROTOBUF_CONSTEXPR WriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteResponse(const WriteResponse& from);
  WriteResponse(WriteResponse&& from) noexcept
    : WriteResponse() {
    *this = ::std::move(from);
  }

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResponse& operator=(WriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteResponse* internal_default_instance() {
    return reinterpret_cast<const WriteResponse*>(
               &_WriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WriteResponse& a, WriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteResponse& from) {
    WriteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.WriteResponse";
  }
  protected:
  explicit WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.WriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class SeekRequestMulti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.SeekRequestMulti) */ {
 public:
  inline SeekRequestMulti() : SeekRequestMulti(nullptr) {}
  ~SeekRequestMulti() override;
  explicit PROTOBUF_CONSTEXPR SeekRequestMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekRequestMulti(const SeekRequestMulti& from);
  SeekRequestMulti(SeekRequestMulti&& from) noexcept
    : SeekRequestMulti() {
    *this = ::std::move(from);
  }

  inline SeekRequestMulti& operator=(const SeekRequestMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekRequestMulti& operator=(SeekRequestMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekRequestMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeekRequestMulti* internal_default_instance() {
    return reinterpret_cast<const SeekRequestMulti*>(
               &_SeekRequestMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SeekRequestMulti& a, SeekRequestMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekRequestMulti* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekRequestMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekRequestMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekRequestMulti>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeekRequestMulti& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeekRequestMulti& from) {
    SeekRequestMulti::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekRequestMulti* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.SeekRequestMulti";
  }
  protected:
  explicit SeekRequestMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountIdFieldNumber = 1,
    kFdFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kWhenceFieldNumber = 4,
  };
  // int32 mount_id = 1;
  void clear_mount_id();
  int32_t mount_id() const;
  void set_mount_id(int32_t value);
  private:
  int32_t _internal_mount_id() const;
  void _internal_set_mount_id(int32_t value);
  public:

  // int32 fd = 2;
  void clear_fd();
  int32_t fd() const;
  void set_fd(int32_t value);
  private:
  int32_t _internal_fd() const;
  void _internal_set_fd(int32_t value);
  public:

  // int32 offset = 3;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 whence = 4;
  void clear_whence();
  int32_t whence() const;
  void set_whence(int32_t value);
  private:
  int32_t _internal_whence() const;
  void _internal_set_whence(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fs.SeekRequestMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t mount_id_;
    int32_t fd_;
    int32_t offset_;
    int32_t whence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class SeekResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.SeekResponse) */ {
 public:
  inline SeekResponse() : SeekResponse(nullptr) {}
  ~SeekResponse() override;
  explicit PROTOBUF_CONSTEXPR SeekResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeekResponse(const SeekResponse& from);
  SeekResponse(SeekResponse&& from) noexcept
    : SeekResponse() {
    *this = ::std::move(from);
  }

  inline SeekResponse& operator=(const SeekResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekResponse& operator=(SeekResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeekResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeekResponse* internal_default_instance() {
    return reinterpret_cast<const SeekResponse*>(
               &_SeekResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SeekResponse& a, SeekResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeekResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeekResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeekResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SeekResponse& from) {
    SeekResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.SeekResponse";
  }
  protected:
  explicit SeekResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.SeekResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class ListdirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.ListdirResponse) */ {
 public:
  inline ListdirResponse() : ListdirResponse(nullptr) {}
  ~ListdirResponse() override;
  explicit PROTOBUF_CONSTEXPR ListdirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListdirResponse(const ListdirResponse& from);
  ListdirResponse(ListdirResponse&& from) noexcept
    : ListdirResponse() {
    *this = ::std::move(from);
  }

  inline ListdirResponse& operator=(const ListdirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListdirResponse& operator=(ListdirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListdirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListdirResponse* internal_default_instance() {
    return reinterpret_cast<const ListdirResponse*>(
               &_ListdirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListdirResponse& a, ListdirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListdirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListdirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListdirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListdirResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListdirResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListdirResponse& from) {
    ListdirResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListdirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.ListdirResponse";
  }
  protected:
  explicit ListdirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // repeated string entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:fs.ListdirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// -------------------------------------------------------------------

class RemoveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fs.RemoveResponse) */ {
 public:
  inline RemoveResponse() : RemoveResponse(nullptr) {}
  ~RemoveResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveResponse(const RemoveResponse& from);
  RemoveResponse(RemoveResponse&& from) noexcept
    : RemoveResponse() {
    *this = ::std::move(from);
  }

  inline RemoveResponse& operator=(const RemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveResponse& operator=(RemoveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveResponse*>(
               &_RemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RemoveResponse& a, RemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveResponse& from) {
    RemoveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fs.RemoveResponse";
  }
  protected:
  explicit RemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fs.RemoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filesystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MountRequest

// string disk_image = 1;
inline void MountRequest::clear_disk_image() {
  _impl_.disk_image_.ClearToEmpty();
}
inline const std::string& MountRequest::disk_image() const {
  // @@protoc_insertion_point(field_get:fs.MountRequest.disk_image)
  return _internal_disk_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MountRequest::set_disk_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.disk_image_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.MountRequest.disk_image)
}
inline std::string* MountRequest::mutable_disk_image() {
  std::string* _s = _internal_mutable_disk_image();
  // @@protoc_insertion_point(field_mutable:fs.MountRequest.disk_image)
  return _s;
}
inline const std::string& MountRequest::_internal_disk_image() const {
  return _impl_.disk_image_.Get();
}
inline void MountRequest::_internal_set_disk_image(const std::string& value) {
  
  _impl_.disk_image_.Set(value, GetArenaForAllocation());
}
inline std::string* MountRequest::_internal_mutable_disk_image() {
  
  return _impl_.disk_image_.Mutable(GetArenaForAllocation());
}
inline std::string* MountRequest::release_disk_image() {
  // @@protoc_insertion_point(field_release:fs.MountRequest.disk_image)
  return _impl_.disk_image_.Release();
}
inline void MountRequest::set_allocated_disk_image(std::string* disk_image) {
  if (disk_image != nullptr) {
    
  } else {
    
  }
  _impl_.disk_image_.SetAllocated(disk_image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.disk_image_.IsDefault()) {
    _impl_.disk_image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.MountRequest.disk_image)
}

// -------------------------------------------------------------------

// MountResponse

// int32 mount_id = 1;
inline void MountResponse::clear_mount_id() {
  _impl_.mount_id_ = 0;
}
inline int32_t MountResponse::_internal_mount_id() const {
  return _impl_.mount_id_;
}
inline int32_t MountResponse::mount_id() const {
  // @@protoc_insertion_point(field_get:fs.MountResponse.mount_id)
  return _internal_mount_id();
}
inline void MountResponse::_internal_set_mount_id(int32_t value) {
  
  _impl_.mount_id_ = value;
}
inline void MountResponse::set_mount_id(int32_t value) {
  _internal_set_mount_id(value);
  // @@protoc_insertion_point(field_set:fs.MountResponse.mount_id)
}

// string error = 2;
inline void MountResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& MountResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.MountResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MountResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.MountResponse.error)
}
inline std::string* MountResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.MountResponse.error)
  return _s;
}
inline const std::string& MountResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void MountResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* MountResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* MountResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.MountResponse.error)
  return _impl_.error_.Release();
}
inline void MountResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.MountResponse.error)
}

// -------------------------------------------------------------------

// FileRequest

// int32 mount_id = 1;
inline void FileRequest::clear_mount_id() {
  _impl_.mount_id_ = 0;
}
inline int32_t FileRequest::_internal_mount_id() const {
  return _impl_.mount_id_;
}
inline int32_t FileRequest::mount_id() const {
  // @@protoc_insertion_point(field_get:fs.FileRequest.mount_id)
  return _internal_mount_id();
}
inline void FileRequest::_internal_set_mount_id(int32_t value) {
  
  _impl_.mount_id_ = value;
}
inline void FileRequest::set_mount_id(int32_t value) {
  _internal_set_mount_id(value);
  // @@protoc_insertion_point(field_set:fs.FileRequest.mount_id)
}

// string path = 2;
inline void FileRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& FileRequest::path() const {
  // @@protoc_insertion_point(field_get:fs.FileRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.FileRequest.path)
}
inline std::string* FileRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:fs.FileRequest.path)
  return _s;
}
inline const std::string& FileRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void FileRequest::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* FileRequest::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* FileRequest::release_path() {
  // @@protoc_insertion_point(field_release:fs.FileRequest.path)
  return _impl_.path_.Release();
}
inline void FileRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.FileRequest.path)
}

// -------------------------------------------------------------------

// CreateResponse

// int32 inum = 1;
inline void CreateResponse::clear_inum() {
  _impl_.inum_ = 0;
}
inline int32_t CreateResponse::_internal_inum() const {
  return _impl_.inum_;
}
inline int32_t CreateResponse::inum() const {
  // @@protoc_insertion_point(field_get:fs.CreateResponse.inum)
  return _internal_inum();
}
inline void CreateResponse::_internal_set_inum(int32_t value) {
  
  _impl_.inum_ = value;
}
inline void CreateResponse::set_inum(int32_t value) {
  _internal_set_inum(value);
  // @@protoc_insertion_point(field_set:fs.CreateResponse.inum)
}

// string error = 2;
inline void CreateResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& CreateResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.CreateResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.CreateResponse.error)
}
inline std::string* CreateResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.CreateResponse.error)
  return _s;
}
inline const std::string& CreateResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void CreateResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.CreateResponse.error)
  return _impl_.error_.Release();
}
inline void CreateResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.CreateResponse.error)
}

// -------------------------------------------------------------------

// MkdirResponse

// int32 inum = 1;
inline void MkdirResponse::clear_inum() {
  _impl_.inum_ = 0;
}
inline int32_t MkdirResponse::_internal_inum() const {
  return _impl_.inum_;
}
inline int32_t MkdirResponse::inum() const {
  // @@protoc_insertion_point(field_get:fs.MkdirResponse.inum)
  return _internal_inum();
}
inline void MkdirResponse::_internal_set_inum(int32_t value) {
  
  _impl_.inum_ = value;
}
inline void MkdirResponse::set_inum(int32_t value) {
  _internal_set_inum(value);
  // @@protoc_insertion_point(field_set:fs.MkdirResponse.inum)
}

// string error = 2;
inline void MkdirResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& MkdirResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.MkdirResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MkdirResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.MkdirResponse.error)
}
inline std::string* MkdirResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.MkdirResponse.error)
  return _s;
}
inline const std::string& MkdirResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void MkdirResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* MkdirResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* MkdirResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.MkdirResponse.error)
  return _impl_.error_.Release();
}
inline void MkdirResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.MkdirResponse.error)
}

// -------------------------------------------------------------------

// OpenResponse

// int32 fd = 1;
inline void OpenResponse::clear_fd() {
  _impl_.fd_ = 0;
}
inline int32_t OpenResponse::_internal_fd() const {
  return _impl_.fd_;
}
inline int32_t OpenResponse::fd() const {
  // @@protoc_insertion_point(field_get:fs.OpenResponse.fd)
  return _internal_fd();
}
inline void OpenResponse::_internal_set_fd(int32_t value) {
  
  _impl_.fd_ = value;
}
inline void OpenResponse::set_fd(int32_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:fs.OpenResponse.fd)
}

// string error = 2;
inline void OpenResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& OpenResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.OpenResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.OpenResponse.error)
}
inline std::string* OpenResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.OpenResponse.error)
  return _s;
}
inline const std::string& OpenResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void OpenResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* OpenResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* OpenResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.OpenResponse.error)
  return _impl_.error_.Release();
}
inline void OpenResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.OpenResponse.error)
}

// -------------------------------------------------------------------

// ReadRequestMulti

// int32 mount_id = 1;
inline void ReadRequestMulti::clear_mount_id() {
  _impl_.mount_id_ = 0;
}
inline int32_t ReadRequestMulti::_internal_mount_id() const {
  return _impl_.mount_id_;
}
inline int32_t ReadRequestMulti::mount_id() const {
  // @@protoc_insertion_point(field_get:fs.ReadRequestMulti.mount_id)
  return _internal_mount_id();
}
inline void ReadRequestMulti::_internal_set_mount_id(int32_t value) {
  
  _impl_.mount_id_ = value;
}
inline void ReadRequestMulti::set_mount_id(int32_t value) {
  _internal_set_mount_id(value);
  // @@protoc_insertion_point(field_set:fs.ReadRequestMulti.mount_id)
}

// int32 fd = 2;
inline void ReadRequestMulti::clear_fd() {
  _impl_.fd_ = 0;
}
inline int32_t ReadRequestMulti::_internal_fd() const {
  return _impl_.fd_;
}
inline int32_t ReadRequestMulti::fd() const {
  // @@protoc_insertion_point(field_get:fs.ReadRequestMulti.fd)
  return _internal_fd();
}
inline void ReadRequestMulti::_internal_set_fd(int32_t value) {
  
  _impl_.fd_ = value;
}
inline void ReadRequestMulti::set_fd(int32_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:fs.ReadRequestMulti.fd)
}

// int32 num_bytes = 3;
inline void ReadRequestMulti::clear_num_bytes() {
  _impl_.num_bytes_ = 0;
}
inline int32_t ReadRequestMulti::_internal_num_bytes() const {
  return _impl_.num_bytes_;
}
inline int32_t ReadRequestMulti::num_bytes() const {
  // @@protoc_insertion_point(field_get:fs.ReadRequestMulti.num_bytes)
  return _internal_num_bytes();
}
inline void ReadRequestMulti::_internal_set_num_bytes(int32_t value) {
  
  _impl_.num_bytes_ = value;
}
inline void ReadRequestMulti::set_num_bytes(int32_t value) {
  _internal_set_num_bytes(value);
  // @@protoc_insertion_point(field_set:fs.ReadRequestMulti.num_bytes)
}

// -------------------------------------------------------------------

// ReadResponse

// bytes data = 1;
inline void ReadResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ReadResponse::data() const {
  // @@protoc_insertion_point(field_get:fs.ReadResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.ReadResponse.data)
}
inline std::string* ReadResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fs.ReadResponse.data)
  return _s;
}
inline const std::string& ReadResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ReadResponse::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadResponse::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadResponse::release_data() {
  // @@protoc_insertion_point(field_release:fs.ReadResponse.data)
  return _impl_.data_.Release();
}
inline void ReadResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.ReadResponse.data)
}

// string error = 2;
inline void ReadResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& ReadResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.ReadResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.ReadResponse.error)
}
inline std::string* ReadResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.ReadResponse.error)
  return _s;
}
inline const std::string& ReadResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void ReadResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.ReadResponse.error)
  return _impl_.error_.Release();
}
inline void ReadResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.ReadResponse.error)
}

// -------------------------------------------------------------------

// WriteRequestMulti

// int32 mount_id = 1;
inline void WriteRequestMulti::clear_mount_id() {
  _impl_.mount_id_ = 0;
}
inline int32_t WriteRequestMulti::_internal_mount_id() const {
  return _impl_.mount_id_;
}
inline int32_t WriteRequestMulti::mount_id() const {
  // @@protoc_insertion_point(field_get:fs.WriteRequestMulti.mount_id)
  return _internal_mount_id();
}
inline void WriteRequestMulti::_internal_set_mount_id(int32_t value) {
  
  _impl_.mount_id_ = value;
}
inline void WriteRequestMulti::set_mount_id(int32_t value) {
  _internal_set_mount_id(value);
  // @@protoc_insertion_point(field_set:fs.WriteRequestMulti.mount_id)
}

// int32 fd = 2;
inline void WriteRequestMulti::clear_fd() {
  _impl_.fd_ = 0;
}
inline int32_t WriteRequestMulti::_internal_fd() const {
  return _impl_.fd_;
}
inline int32_t WriteRequestMulti::fd() const {
  // @@protoc_insertion_point(field_get:fs.WriteRequestMulti.fd)
  return _internal_fd();
}
inline void WriteRequestMulti::_internal_set_fd(int32_t value) {
  
  _impl_.fd_ = value;
}
inline void WriteRequestMulti::set_fd(int32_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:fs.WriteRequestMulti.fd)
}

// bytes data = 3;
inline void WriteRequestMulti::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& WriteRequestMulti::data() const {
  // @@protoc_insertion_point(field_get:fs.WriteRequestMulti.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteRequestMulti::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.WriteRequestMulti.data)
}
inline std::string* WriteRequestMulti::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fs.WriteRequestMulti.data)
  return _s;
}
inline const std::string& WriteRequestMulti::_internal_data() const {
  return _impl_.data_.Get();
}
inline void WriteRequestMulti::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteRequestMulti::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteRequestMulti::release_data() {
  // @@protoc_insertion_point(field_release:fs.WriteRequestMulti.data)
  return _impl_.data_.Release();
}
inline void WriteRequestMulti::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.WriteRequestMulti.data)
}

// -------------------------------------------------------------------

// WriteResponse

// bool success = 1;
inline void WriteResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool WriteResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool WriteResponse::success() const {
  // @@protoc_insertion_point(field_get:fs.WriteResponse.success)
  return _internal_success();
}
inline void WriteResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void WriteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:fs.WriteResponse.success)
}

// string error = 2;
inline void WriteResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& WriteResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.WriteResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.WriteResponse.error)
}
inline std::string* WriteResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.WriteResponse.error)
  return _s;
}
inline const std::string& WriteResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void WriteResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.WriteResponse.error)
  return _impl_.error_.Release();
}
inline void WriteResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.WriteResponse.error)
}

// -------------------------------------------------------------------

// SeekRequestMulti

// int32 mount_id = 1;
inline void SeekRequestMulti::clear_mount_id() {
  _impl_.mount_id_ = 0;
}
inline int32_t SeekRequestMulti::_internal_mount_id() const {
  return _impl_.mount_id_;
}
inline int32_t SeekRequestMulti::mount_id() const {
  // @@protoc_insertion_point(field_get:fs.SeekRequestMulti.mount_id)
  return _internal_mount_id();
}
inline void SeekRequestMulti::_internal_set_mount_id(int32_t value) {
  
  _impl_.mount_id_ = value;
}
inline void SeekRequestMulti::set_mount_id(int32_t value) {
  _internal_set_mount_id(value);
  // @@protoc_insertion_point(field_set:fs.SeekRequestMulti.mount_id)
}

// int32 fd = 2;
inline void SeekRequestMulti::clear_fd() {
  _impl_.fd_ = 0;
}
inline int32_t SeekRequestMulti::_internal_fd() const {
  return _impl_.fd_;
}
inline int32_t SeekRequestMulti::fd() const {
  // @@protoc_insertion_point(field_get:fs.SeekRequestMulti.fd)
  return _internal_fd();
}
inline void SeekRequestMulti::_internal_set_fd(int32_t value) {
  
  _impl_.fd_ = value;
}
inline void SeekRequestMulti::set_fd(int32_t value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:fs.SeekRequestMulti.fd)
}

// int32 offset = 3;
inline void SeekRequestMulti::clear_offset() {
  _impl_.offset_ = 0;
}
inline int32_t SeekRequestMulti::_internal_offset() const {
  return _impl_.offset_;
}
inline int32_t SeekRequestMulti::offset() const {
  // @@protoc_insertion_point(field_get:fs.SeekRequestMulti.offset)
  return _internal_offset();
}
inline void SeekRequestMulti::_internal_set_offset(int32_t value) {
  
  _impl_.offset_ = value;
}
inline void SeekRequestMulti::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:fs.SeekRequestMulti.offset)
}

// int32 whence = 4;
inline void SeekRequestMulti::clear_whence() {
  _impl_.whence_ = 0;
}
inline int32_t SeekRequestMulti::_internal_whence() const {
  return _impl_.whence_;
}
inline int32_t SeekRequestMulti::whence() const {
  // @@protoc_insertion_point(field_get:fs.SeekRequestMulti.whence)
  return _internal_whence();
}
inline void SeekRequestMulti::_internal_set_whence(int32_t value) {
  
  _impl_.whence_ = value;
}
inline void SeekRequestMulti::set_whence(int32_t value) {
  _internal_set_whence(value);
  // @@protoc_insertion_point(field_set:fs.SeekRequestMulti.whence)
}

// -------------------------------------------------------------------

// SeekResponse

// bool success = 1;
inline void SeekResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool SeekResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool SeekResponse::success() const {
  // @@protoc_insertion_point(field_get:fs.SeekResponse.success)
  return _internal_success();
}
inline void SeekResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void SeekResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:fs.SeekResponse.success)
}

// string error = 2;
inline void SeekResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& SeekResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.SeekResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeekResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.SeekResponse.error)
}
inline std::string* SeekResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.SeekResponse.error)
  return _s;
}
inline const std::string& SeekResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SeekResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SeekResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SeekResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.SeekResponse.error)
  return _impl_.error_.Release();
}
inline void SeekResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.SeekResponse.error)
}

// -------------------------------------------------------------------

// ListdirResponse

// repeated string entries = 1;
inline int ListdirResponse::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int ListdirResponse::entries_size() const {
  return _internal_entries_size();
}
inline void ListdirResponse::clear_entries() {
  _impl_.entries_.Clear();
}
inline std::string* ListdirResponse::add_entries() {
  std::string* _s = _internal_add_entries();
  // @@protoc_insertion_point(field_add_mutable:fs.ListdirResponse.entries)
  return _s;
}
inline const std::string& ListdirResponse::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const std::string& ListdirResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:fs.ListdirResponse.entries)
  return _internal_entries(index);
}
inline std::string* ListdirResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:fs.ListdirResponse.entries)
  return _impl_.entries_.Mutable(index);
}
inline void ListdirResponse::set_entries(int index, const std::string& value) {
  _impl_.entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fs.ListdirResponse.entries)
}
inline void ListdirResponse::set_entries(int index, std::string&& value) {
  _impl_.entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fs.ListdirResponse.entries)
}
inline void ListdirResponse::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fs.ListdirResponse.entries)
}
inline void ListdirResponse::set_entries(int index, const char* value, size_t size) {
  _impl_.entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fs.ListdirResponse.entries)
}
inline std::string* ListdirResponse::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline void ListdirResponse::add_entries(const std::string& value) {
  _impl_.entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fs.ListdirResponse.entries)
}
inline void ListdirResponse::add_entries(std::string&& value) {
  _impl_.entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fs.ListdirResponse.entries)
}
inline void ListdirResponse::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fs.ListdirResponse.entries)
}
inline void ListdirResponse::add_entries(const char* value, size_t size) {
  _impl_.entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fs.ListdirResponse.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListdirResponse::entries() const {
  // @@protoc_insertion_point(field_list:fs.ListdirResponse.entries)
  return _impl_.entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListdirResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:fs.ListdirResponse.entries)
  return &_impl_.entries_;
}

// string error = 2;
inline void ListdirResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& ListdirResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.ListdirResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListdirResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.ListdirResponse.error)
}
inline std::string* ListdirResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.ListdirResponse.error)
  return _s;
}
inline const std::string& ListdirResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void ListdirResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* ListdirResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* ListdirResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.ListdirResponse.error)
  return _impl_.error_.Release();
}
inline void ListdirResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.ListdirResponse.error)
}

// -------------------------------------------------------------------

// RemoveResponse

// bool success = 1;
inline void RemoveResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool RemoveResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool RemoveResponse::success() const {
  // @@protoc_insertion_point(field_get:fs.RemoveResponse.success)
  return _internal_success();
}
inline void RemoveResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void RemoveResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:fs.RemoveResponse.success)
}

// string error = 2;
inline void RemoveResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RemoveResponse::error() const {
  // @@protoc_insertion_point(field_get:fs.RemoveResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fs.RemoveResponse.error)
}
inline std::string* RemoveResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:fs.RemoveResponse.error)
  return _s;
}
inline const std::string& RemoveResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RemoveResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveResponse::release_error() {
  // @@protoc_insertion_point(field_release:fs.RemoveResponse.error)
  return _impl_.error_.Release();
}
inline void RemoveResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fs.RemoveResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_filesystem_2eproto
