// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication.proto

#include "replication.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace replication {
PROTOBUF_CONSTEXPR AppendRequest::AppendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.leader_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendRequestDefaultTypeInternal() {}
  union {
    AppendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendRequestDefaultTypeInternal _AppendRequest_default_instance_;
PROTOBUF_CONSTEXPR AppendReply::AppendReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.follower_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendReplyDefaultTypeInternal() {}
  union {
    AppendReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendReplyDefaultTypeInternal _AppendReply_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatRequest::HeartbeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatRequestDefaultTypeInternal() {}
  union {
    HeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatReply::HeartbeatReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ack_)*/false
  , /*decltype(_impl_.follower_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatReplyDefaultTypeInternal() {}
  union {
    HeartbeatReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatReplyDefaultTypeInternal _HeartbeatReply_default_instance_;
}  // namespace replication
static ::_pb::Metadata file_level_metadata_replication_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_replication_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_replication_2eproto = nullptr;

const uint32_t TableStruct_replication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replication::AppendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::replication::AppendRequest, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::replication::AppendRequest, _impl_.leader_id_),
  PROTOBUF_FIELD_OFFSET(::replication::AppendRequest, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replication::AppendReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::replication::AppendReply, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::replication::AppendReply, _impl_.follower_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replication::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::replication::HeartbeatRequest, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::replication::HeartbeatRequest, _impl_.leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::replication::HeartbeatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::replication::HeartbeatReply, _impl_.ack_),
  PROTOBUF_FIELD_OFFSET(::replication::HeartbeatReply, _impl_.follower_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::replication::AppendRequest)},
  { 9, -1, -1, sizeof(::replication::AppendReply)},
  { 17, -1, -1, sizeof(::replication::HeartbeatRequest)},
  { 25, -1, -1, sizeof(::replication::HeartbeatReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::replication::_AppendRequest_default_instance_._instance,
  &::replication::_AppendReply_default_instance_._instance,
  &::replication::_HeartbeatRequest_default_instance_._instance,
  &::replication::_HeartbeatReply_default_instance_._instance,
};

const char descriptor_table_protodef_replication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021replication.proto\022\013replication\"A\n\rAppe"
  "ndRequest\022\014\n\004term\030\001 \001(\005\022\021\n\tleader_id\030\002 \001"
  "(\t\022\017\n\007entries\030\003 \003(\t\"3\n\013AppendReply\022\017\n\007su"
  "ccess\030\001 \001(\010\022\023\n\013follower_id\030\002 \001(\005\"3\n\020Hear"
  "tbeatRequest\022\014\n\004term\030\001 \001(\005\022\021\n\tleader_id\030"
  "\002 \001(\t\"2\n\016HeartbeatReply\022\013\n\003ack\030\001 \001(\010\022\023\n\013"
  "follower_id\030\002 \001(\0052\235\001\n\013Replication\022E\n\rApp"
  "endEntries\022\032.replication.AppendRequest\032\030"
  ".replication.AppendReply\022G\n\tHeartbeat\022\035."
  "replication.HeartbeatRequest\032\033.replicati"
  "on.HeartbeatReplyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_replication_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_replication_2eproto = {
    false, false, 425, descriptor_table_protodef_replication_2eproto,
    "replication.proto",
    &descriptor_table_replication_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_replication_2eproto::offsets,
    file_level_metadata_replication_2eproto, file_level_enum_descriptors_replication_2eproto,
    file_level_service_descriptors_replication_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_replication_2eproto_getter() {
  return &descriptor_table_replication_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_replication_2eproto(&descriptor_table_replication_2eproto);
namespace replication {

// ===================================================================

class AppendRequest::_Internal {
 public:
};

AppendRequest::AppendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:replication.AppendRequest)
}
AppendRequest::AppendRequest(const AppendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.leader_id_){}
    , decltype(_impl_.term_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader_id().empty()) {
    _this->_impl_.leader_id_.Set(from._internal_leader_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.term_ = from._impl_.term_;
  // @@protoc_insertion_point(copy_constructor:replication.AppendRequest)
}

inline void AppendRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.leader_id_){}
    , decltype(_impl_.term_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppendRequest::~AppendRequest() {
  // @@protoc_insertion_point(destructor:replication.AppendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.leader_id_.Destroy();
}

void AppendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.AppendRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.leader_id_.ClearToEmpty();
  _impl_.term_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "replication.AppendRequest.leader_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "replication.AppendRequest.entries"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.AppendRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // string leader_id = 2;
  if (!this->_internal_leader_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_id().data(), static_cast<int>(this->_internal_leader_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replication.AppendRequest.leader_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader_id(), target);
  }

  // repeated string entries = 3;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replication.AppendRequest.entries");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.AppendRequest)
  return target;
}

size_t AppendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.AppendRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string entries = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.entries_.size());
  for (int i = 0, n = _impl_.entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.entries_.Get(i));
  }

  // string leader_id = 2;
  if (!this->_internal_leader_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_id());
  }

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendRequest::GetClassData() const { return &_class_data_; }


void AppendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendRequest*>(&to_msg);
  auto& from = static_cast<const AppendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:replication.AppendRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (!from._internal_leader_id().empty()) {
    _this->_internal_set_leader_id(from._internal_leader_id());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendRequest::CopyFrom(const AppendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.AppendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRequest::IsInitialized() const {
  return true;
}

void AppendRequest::InternalSwap(AppendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_id_, lhs_arena,
      &other->_impl_.leader_id_, rhs_arena
  );
  swap(_impl_.term_, other->_impl_.term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_replication_2eproto_getter, &descriptor_table_replication_2eproto_once,
      file_level_metadata_replication_2eproto[0]);
}

// ===================================================================

class AppendReply::_Internal {
 public:
};

AppendReply::AppendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:replication.AppendReply)
}
AppendReply::AppendReply(const AppendReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.follower_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.follower_id_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.follower_id_));
  // @@protoc_insertion_point(copy_constructor:replication.AppendReply)
}

inline void AppendReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.follower_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendReply::~AppendReply() {
  // @@protoc_insertion_point(destructor:replication.AppendReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendReply::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.AppendReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.follower_id_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.follower_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 follower_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.follower_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.AppendReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 follower_id = 2;
  if (this->_internal_follower_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_follower_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.AppendReply)
  return target;
}

size_t AppendReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.AppendReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 follower_id = 2;
  if (this->_internal_follower_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_follower_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendReply::GetClassData() const { return &_class_data_; }


void AppendReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendReply*>(&to_msg);
  auto& from = static_cast<const AppendReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:replication.AppendReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_follower_id() != 0) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendReply::CopyFrom(const AppendReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.AppendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendReply::IsInitialized() const {
  return true;
}

void AppendReply::InternalSwap(AppendReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendReply, _impl_.follower_id_)
      + sizeof(AppendReply::_impl_.follower_id_)
      - PROTOBUF_FIELD_OFFSET(AppendReply, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_replication_2eproto_getter, &descriptor_table_replication_2eproto_once,
      file_level_metadata_replication_2eproto[1]);
}

// ===================================================================

class HeartbeatRequest::_Internal {
 public:
};

HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:replication.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_id_){}
    , decltype(_impl_.term_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader_id().empty()) {
    _this->_impl_.leader_id_.Set(from._internal_leader_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.term_ = from._impl_.term_;
  // @@protoc_insertion_point(copy_constructor:replication.HeartbeatRequest)
}

inline void HeartbeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_id_){}
    , decltype(_impl_.term_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:replication.HeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leader_id_.Destroy();
}

void HeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_id_.ClearToEmpty();
  _impl_.term_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_leader_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "replication.HeartbeatRequest.leader_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // string leader_id = 2;
  if (!this->_internal_leader_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_id().data(), static_cast<int>(this->_internal_leader_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "replication.HeartbeatRequest.leader_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.HeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leader_id = 2;
  if (!this->_internal_leader_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_id());
  }

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRequest::GetClassData() const { return &_class_data_; }


void HeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:replication.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_leader_id().empty()) {
    _this->_internal_set_leader_id(from._internal_leader_id());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_id_, lhs_arena,
      &other->_impl_.leader_id_, rhs_arena
  );
  swap(_impl_.term_, other->_impl_.term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_replication_2eproto_getter, &descriptor_table_replication_2eproto_once,
      file_level_metadata_replication_2eproto[2]);
}

// ===================================================================

class HeartbeatReply::_Internal {
 public:
};

HeartbeatReply::HeartbeatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:replication.HeartbeatReply)
}
HeartbeatReply::HeartbeatReply(const HeartbeatReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_){}
    , decltype(_impl_.follower_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ack_, &from._impl_.ack_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.follower_id_) -
    reinterpret_cast<char*>(&_impl_.ack_)) + sizeof(_impl_.follower_id_));
  // @@protoc_insertion_point(copy_constructor:replication.HeartbeatReply)
}

inline void HeartbeatReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_){false}
    , decltype(_impl_.follower_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatReply::~HeartbeatReply() {
  // @@protoc_insertion_point(destructor:replication.HeartbeatReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartbeatReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:replication.HeartbeatReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.follower_id_) -
      reinterpret_cast<char*>(&_impl_.ack_)) + sizeof(_impl_.follower_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 follower_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.follower_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:replication.HeartbeatReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ack = 1;
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ack(), target);
  }

  // int32 follower_id = 2;
  if (this->_internal_follower_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_follower_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:replication.HeartbeatReply)
  return target;
}

size_t HeartbeatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:replication.HeartbeatReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ack = 1;
  if (this->_internal_ack() != 0) {
    total_size += 1 + 1;
  }

  // int32 follower_id = 2;
  if (this->_internal_follower_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_follower_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatReply::GetClassData() const { return &_class_data_; }


void HeartbeatReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatReply*>(&to_msg);
  auto& from = static_cast<const HeartbeatReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:replication.HeartbeatReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ack() != 0) {
    _this->_internal_set_ack(from._internal_ack());
  }
  if (from._internal_follower_id() != 0) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatReply::CopyFrom(const HeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:replication.HeartbeatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatReply::IsInitialized() const {
  return true;
}

void HeartbeatReply::InternalSwap(HeartbeatReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartbeatReply, _impl_.follower_id_)
      + sizeof(HeartbeatReply::_impl_.follower_id_)
      - PROTOBUF_FIELD_OFFSET(HeartbeatReply, _impl_.ack_)>(
          reinterpret_cast<char*>(&_impl_.ack_),
          reinterpret_cast<char*>(&other->_impl_.ack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_replication_2eproto_getter, &descriptor_table_replication_2eproto_once,
      file_level_metadata_replication_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace replication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::replication::AppendRequest*
Arena::CreateMaybeMessage< ::replication::AppendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::AppendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::AppendReply*
Arena::CreateMaybeMessage< ::replication::AppendReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::AppendReply >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::HeartbeatRequest*
Arena::CreateMaybeMessage< ::replication::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::replication::HeartbeatReply*
Arena::CreateMaybeMessage< ::replication::HeartbeatReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::replication::HeartbeatReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
