// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_replication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_replication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_replication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_replication_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replication_2eproto;
namespace replication {
class AppendReply;
struct AppendReplyDefaultTypeInternal;
extern AppendReplyDefaultTypeInternal _AppendReply_default_instance_;
class AppendRequest;
struct AppendRequestDefaultTypeInternal;
extern AppendRequestDefaultTypeInternal _AppendRequest_default_instance_;
class HeartbeatReply;
struct HeartbeatReplyDefaultTypeInternal;
extern HeartbeatReplyDefaultTypeInternal _HeartbeatReply_default_instance_;
class HeartbeatRequest;
struct HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
}  // namespace replication
PROTOBUF_NAMESPACE_OPEN
template<> ::replication::AppendReply* Arena::CreateMaybeMessage<::replication::AppendReply>(Arena*);
template<> ::replication::AppendRequest* Arena::CreateMaybeMessage<::replication::AppendRequest>(Arena*);
template<> ::replication::HeartbeatReply* Arena::CreateMaybeMessage<::replication::HeartbeatReply>(Arena*);
template<> ::replication::HeartbeatRequest* Arena::CreateMaybeMessage<::replication::HeartbeatRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace replication {

// ===================================================================

class AppendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.AppendRequest) */ {
 public:
  inline AppendRequest() : AppendRequest(nullptr) {}
  ~AppendRequest() override;
  explicit PROTOBUF_CONSTEXPR AppendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendRequest(const AppendRequest& from);
  AppendRequest(AppendRequest&& from) noexcept
    : AppendRequest() {
    *this = ::std::move(from);
  }

  inline AppendRequest& operator=(const AppendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendRequest& operator=(AppendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendRequest* internal_default_instance() {
    return reinterpret_cast<const AppendRequest*>(
               &_AppendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppendRequest& a, AppendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendRequest& from) {
    AppendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.AppendRequest";
  }
  protected:
  explicit AppendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kLeaderIdFieldNumber = 2,
    kTermFieldNumber = 1,
  };
  // repeated string entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // string leader_id = 2;
  void clear_leader_id();
  const std::string& leader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:replication.AppendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
    int32_t term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class AppendReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.AppendReply) */ {
 public:
  inline AppendReply() : AppendReply(nullptr) {}
  ~AppendReply() override;
  explicit PROTOBUF_CONSTEXPR AppendReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendReply(const AppendReply& from);
  AppendReply(AppendReply&& from) noexcept
    : AppendReply() {
    *this = ::std::move(from);
  }

  inline AppendReply& operator=(const AppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendReply& operator=(AppendReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendReply* internal_default_instance() {
    return reinterpret_cast<const AppendReply*>(
               &_AppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppendReply& a, AppendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendReply& from) {
    AppendReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.AppendReply";
  }
  protected:
  explicit AppendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kFollowerIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 follower_id = 2;
  void clear_follower_id();
  int32_t follower_id() const;
  void set_follower_id(int32_t value);
  private:
  int32_t _internal_follower_id() const;
  void _internal_set_follower_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:replication.AppendReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t follower_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.HeartbeatRequest) */ {
 public:
  inline HeartbeatRequest() : HeartbeatRequest(nullptr) {}
  ~HeartbeatRequest() override;
  explicit PROTOBUF_CONSTEXPR HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatRequest(const HeartbeatRequest& from);
  HeartbeatRequest(HeartbeatRequest&& from) noexcept
    : HeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
               &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartbeatRequest& from) {
    HeartbeatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.HeartbeatRequest";
  }
  protected:
  explicit HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 2,
    kTermFieldNumber = 1,
  };
  // string leader_id = 2;
  void clear_leader_id();
  const std::string& leader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:replication.HeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
    int32_t term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.HeartbeatReply) */ {
 public:
  inline HeartbeatReply() : HeartbeatReply(nullptr) {}
  ~HeartbeatReply() override;
  explicit PROTOBUF_CONSTEXPR HeartbeatReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatReply(const HeartbeatReply& from);
  HeartbeatReply(HeartbeatReply&& from) noexcept
    : HeartbeatReply() {
    *this = ::std::move(from);
  }

  inline HeartbeatReply& operator=(const HeartbeatReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatReply& operator=(HeartbeatReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatReply* internal_default_instance() {
    return reinterpret_cast<const HeartbeatReply*>(
               &_HeartbeatReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartbeatReply& a, HeartbeatReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartbeatReply& from) {
    HeartbeatReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.HeartbeatReply";
  }
  protected:
  explicit HeartbeatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
    kFollowerIdFieldNumber = 2,
  };
  // bool ack = 1;
  void clear_ack();
  bool ack() const;
  void set_ack(bool value);
  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);
  public:

  // int32 follower_id = 2;
  void clear_follower_id();
  int32_t follower_id() const;
  void set_follower_id(int32_t value);
  private:
  int32_t _internal_follower_id() const;
  void _internal_set_follower_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:replication.HeartbeatReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ack_;
    int32_t follower_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppendRequest

// int32 term = 1;
inline void AppendRequest::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t AppendRequest::_internal_term() const {
  return _impl_.term_;
}
inline int32_t AppendRequest::term() const {
  // @@protoc_insertion_point(field_get:replication.AppendRequest.term)
  return _internal_term();
}
inline void AppendRequest::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void AppendRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:replication.AppendRequest.term)
}

// string leader_id = 2;
inline void AppendRequest::clear_leader_id() {
  _impl_.leader_id_.ClearToEmpty();
}
inline const std::string& AppendRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:replication.AppendRequest.leader_id)
  return _internal_leader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendRequest::set_leader_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.leader_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:replication.AppendRequest.leader_id)
}
inline std::string* AppendRequest::mutable_leader_id() {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:replication.AppendRequest.leader_id)
  return _s;
}
inline const std::string& AppendRequest::_internal_leader_id() const {
  return _impl_.leader_id_.Get();
}
inline void AppendRequest::_internal_set_leader_id(const std::string& value) {
  
  _impl_.leader_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AppendRequest::_internal_mutable_leader_id() {
  
  return _impl_.leader_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AppendRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:replication.AppendRequest.leader_id)
  return _impl_.leader_id_.Release();
}
inline void AppendRequest::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  _impl_.leader_id_.SetAllocated(leader_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_id_.IsDefault()) {
    _impl_.leader_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:replication.AppendRequest.leader_id)
}

// repeated string entries = 3;
inline int AppendRequest::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int AppendRequest::entries_size() const {
  return _internal_entries_size();
}
inline void AppendRequest::clear_entries() {
  _impl_.entries_.Clear();
}
inline std::string* AppendRequest::add_entries() {
  std::string* _s = _internal_add_entries();
  // @@protoc_insertion_point(field_add_mutable:replication.AppendRequest.entries)
  return _s;
}
inline const std::string& AppendRequest::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const std::string& AppendRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:replication.AppendRequest.entries)
  return _internal_entries(index);
}
inline std::string* AppendRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:replication.AppendRequest.entries)
  return _impl_.entries_.Mutable(index);
}
inline void AppendRequest::set_entries(int index, const std::string& value) {
  _impl_.entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:replication.AppendRequest.entries)
}
inline void AppendRequest::set_entries(int index, std::string&& value) {
  _impl_.entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:replication.AppendRequest.entries)
}
inline void AppendRequest::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:replication.AppendRequest.entries)
}
inline void AppendRequest::set_entries(int index, const char* value, size_t size) {
  _impl_.entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:replication.AppendRequest.entries)
}
inline std::string* AppendRequest::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline void AppendRequest::add_entries(const std::string& value) {
  _impl_.entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:replication.AppendRequest.entries)
}
inline void AppendRequest::add_entries(std::string&& value) {
  _impl_.entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:replication.AppendRequest.entries)
}
inline void AppendRequest::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:replication.AppendRequest.entries)
}
inline void AppendRequest::add_entries(const char* value, size_t size) {
  _impl_.entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:replication.AppendRequest.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppendRequest::entries() const {
  // @@protoc_insertion_point(field_list:replication.AppendRequest.entries)
  return _impl_.entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppendRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:replication.AppendRequest.entries)
  return &_impl_.entries_;
}

// -------------------------------------------------------------------

// AppendReply

// bool success = 1;
inline void AppendReply::clear_success() {
  _impl_.success_ = false;
}
inline bool AppendReply::_internal_success() const {
  return _impl_.success_;
}
inline bool AppendReply::success() const {
  // @@protoc_insertion_point(field_get:replication.AppendReply.success)
  return _internal_success();
}
inline void AppendReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void AppendReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:replication.AppendReply.success)
}

// int32 follower_id = 2;
inline void AppendReply::clear_follower_id() {
  _impl_.follower_id_ = 0;
}
inline int32_t AppendReply::_internal_follower_id() const {
  return _impl_.follower_id_;
}
inline int32_t AppendReply::follower_id() const {
  // @@protoc_insertion_point(field_get:replication.AppendReply.follower_id)
  return _internal_follower_id();
}
inline void AppendReply::_internal_set_follower_id(int32_t value) {
  
  _impl_.follower_id_ = value;
}
inline void AppendReply::set_follower_id(int32_t value) {
  _internal_set_follower_id(value);
  // @@protoc_insertion_point(field_set:replication.AppendReply.follower_id)
}

// -------------------------------------------------------------------

// HeartbeatRequest

// int32 term = 1;
inline void HeartbeatRequest::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t HeartbeatRequest::_internal_term() const {
  return _impl_.term_;
}
inline int32_t HeartbeatRequest::term() const {
  // @@protoc_insertion_point(field_get:replication.HeartbeatRequest.term)
  return _internal_term();
}
inline void HeartbeatRequest::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void HeartbeatRequest::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:replication.HeartbeatRequest.term)
}

// string leader_id = 2;
inline void HeartbeatRequest::clear_leader_id() {
  _impl_.leader_id_.ClearToEmpty();
}
inline const std::string& HeartbeatRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:replication.HeartbeatRequest.leader_id)
  return _internal_leader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeartbeatRequest::set_leader_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.leader_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:replication.HeartbeatRequest.leader_id)
}
inline std::string* HeartbeatRequest::mutable_leader_id() {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:replication.HeartbeatRequest.leader_id)
  return _s;
}
inline const std::string& HeartbeatRequest::_internal_leader_id() const {
  return _impl_.leader_id_.Get();
}
inline void HeartbeatRequest::_internal_set_leader_id(const std::string& value) {
  
  _impl_.leader_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HeartbeatRequest::_internal_mutable_leader_id() {
  
  return _impl_.leader_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HeartbeatRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:replication.HeartbeatRequest.leader_id)
  return _impl_.leader_id_.Release();
}
inline void HeartbeatRequest::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  _impl_.leader_id_.SetAllocated(leader_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_id_.IsDefault()) {
    _impl_.leader_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:replication.HeartbeatRequest.leader_id)
}

// -------------------------------------------------------------------

// HeartbeatReply

// bool ack = 1;
inline void HeartbeatReply::clear_ack() {
  _impl_.ack_ = false;
}
inline bool HeartbeatReply::_internal_ack() const {
  return _impl_.ack_;
}
inline bool HeartbeatReply::ack() const {
  // @@protoc_insertion_point(field_get:replication.HeartbeatReply.ack)
  return _internal_ack();
}
inline void HeartbeatReply::_internal_set_ack(bool value) {
  
  _impl_.ack_ = value;
}
inline void HeartbeatReply::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:replication.HeartbeatReply.ack)
}

// int32 follower_id = 2;
inline void HeartbeatReply::clear_follower_id() {
  _impl_.follower_id_ = 0;
}
inline int32_t HeartbeatReply::_internal_follower_id() const {
  return _impl_.follower_id_;
}
inline int32_t HeartbeatReply::follower_id() const {
  // @@protoc_insertion_point(field_get:replication.HeartbeatReply.follower_id)
  return _internal_follower_id();
}
inline void HeartbeatReply::_internal_set_follower_id(int32_t value) {
  
  _impl_.follower_id_ = value;
}
inline void HeartbeatReply::set_follower_id(int32_t value) {
  _internal_set_follower_id(value);
  // @@protoc_insertion_point(field_set:replication.HeartbeatReply.follower_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace replication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_replication_2eproto
