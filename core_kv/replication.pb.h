// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_replication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_replication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_replication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_replication_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_replication_2eproto;
namespace replication {
class HeartbeatReply;
struct HeartbeatReplyDefaultTypeInternal;
extern HeartbeatReplyDefaultTypeInternal _HeartbeatReply_default_instance_;
class HeartbeatRequest;
struct HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class ReplicatePutReply;
struct ReplicatePutReplyDefaultTypeInternal;
extern ReplicatePutReplyDefaultTypeInternal _ReplicatePutReply_default_instance_;
class ReplicatePutRequest;
struct ReplicatePutRequestDefaultTypeInternal;
extern ReplicatePutRequestDefaultTypeInternal _ReplicatePutRequest_default_instance_;
}  // namespace replication
PROTOBUF_NAMESPACE_OPEN
template<> ::replication::HeartbeatReply* Arena::CreateMaybeMessage<::replication::HeartbeatReply>(Arena*);
template<> ::replication::HeartbeatRequest* Arena::CreateMaybeMessage<::replication::HeartbeatRequest>(Arena*);
template<> ::replication::ReplicatePutReply* Arena::CreateMaybeMessage<::replication::ReplicatePutReply>(Arena*);
template<> ::replication::ReplicatePutRequest* Arena::CreateMaybeMessage<::replication::ReplicatePutRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace replication {

// ===================================================================

class ReplicatePutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.ReplicatePutRequest) */ {
 public:
  inline ReplicatePutRequest() : ReplicatePutRequest(nullptr) {}
  ~ReplicatePutRequest() override;
  explicit PROTOBUF_CONSTEXPR ReplicatePutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicatePutRequest(const ReplicatePutRequest& from);
  ReplicatePutRequest(ReplicatePutRequest&& from) noexcept
    : ReplicatePutRequest() {
    *this = ::std::move(from);
  }

  inline ReplicatePutRequest& operator=(const ReplicatePutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicatePutRequest& operator=(ReplicatePutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicatePutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicatePutRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicatePutRequest*>(
               &_ReplicatePutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReplicatePutRequest& a, ReplicatePutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicatePutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicatePutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicatePutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicatePutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicatePutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicatePutRequest& from) {
    ReplicatePutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicatePutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.ReplicatePutRequest";
  }
  protected:
  explicit ReplicatePutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:replication.ReplicatePutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class ReplicatePutReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.ReplicatePutReply) */ {
 public:
  inline ReplicatePutReply() : ReplicatePutReply(nullptr) {}
  ~ReplicatePutReply() override;
  explicit PROTOBUF_CONSTEXPR ReplicatePutReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicatePutReply(const ReplicatePutReply& from);
  ReplicatePutReply(ReplicatePutReply&& from) noexcept
    : ReplicatePutReply() {
    *this = ::std::move(from);
  }

  inline ReplicatePutReply& operator=(const ReplicatePutReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicatePutReply& operator=(ReplicatePutReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicatePutReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicatePutReply* internal_default_instance() {
    return reinterpret_cast<const ReplicatePutReply*>(
               &_ReplicatePutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReplicatePutReply& a, ReplicatePutReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicatePutReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicatePutReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicatePutReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplicatePutReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplicatePutReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplicatePutReply& from) {
    ReplicatePutReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicatePutReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.ReplicatePutReply";
  }
  protected:
  explicit ReplicatePutReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // string success = 1;
  void clear_success();
  const std::string& success() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_success(ArgT0&& arg0, ArgT... args);
  std::string* mutable_success();
  PROTOBUF_NODISCARD std::string* release_success();
  void set_allocated_success(std::string* success);
  private:
  const std::string& _internal_success() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // @@protoc_insertion_point(class_scope:replication.ReplicatePutReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.HeartbeatRequest) */ {
 public:
  inline HeartbeatRequest() : HeartbeatRequest(nullptr) {}
  ~HeartbeatRequest() override;
  explicit PROTOBUF_CONSTEXPR HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatRequest(const HeartbeatRequest& from);
  HeartbeatRequest(HeartbeatRequest&& from) noexcept
    : HeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
               &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartbeatRequest& from) {
    HeartbeatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.HeartbeatRequest";
  }
  protected:
  explicit HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderIdFieldNumber = 1,
  };
  // string leader_id = 1;
  void clear_leader_id();
  const std::string& leader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // @@protoc_insertion_point(class_scope:replication.HeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:replication.HeartbeatReply) */ {
 public:
  inline HeartbeatReply() : HeartbeatReply(nullptr) {}
  ~HeartbeatReply() override;
  explicit PROTOBUF_CONSTEXPR HeartbeatReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatReply(const HeartbeatReply& from);
  HeartbeatReply(HeartbeatReply&& from) noexcept
    : HeartbeatReply() {
    *this = ::std::move(from);
  }

  inline HeartbeatReply& operator=(const HeartbeatReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatReply& operator=(HeartbeatReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatReply* internal_default_instance() {
    return reinterpret_cast<const HeartbeatReply*>(
               &_HeartbeatReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartbeatReply& a, HeartbeatReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartbeatReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartbeatReply& from) {
    HeartbeatReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "replication.HeartbeatReply";
  }
  protected:
  explicit HeartbeatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowerIdFieldNumber = 2,
    kAliveFieldNumber = 1,
  };
  // string follower_id = 2;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_NODISCARD std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // bool alive = 1;
  void clear_alive();
  bool alive() const;
  void set_alive(bool value);
  private:
  bool _internal_alive() const;
  void _internal_set_alive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:replication.HeartbeatReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
    bool alive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_replication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReplicatePutRequest

// string key = 1;
inline void ReplicatePutRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ReplicatePutRequest::key() const {
  // @@protoc_insertion_point(field_get:replication.ReplicatePutRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicatePutRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:replication.ReplicatePutRequest.key)
}
inline std::string* ReplicatePutRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:replication.ReplicatePutRequest.key)
  return _s;
}
inline const std::string& ReplicatePutRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ReplicatePutRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicatePutRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicatePutRequest::release_key() {
  // @@protoc_insertion_point(field_release:replication.ReplicatePutRequest.key)
  return _impl_.key_.Release();
}
inline void ReplicatePutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:replication.ReplicatePutRequest.key)
}

// string value = 2;
inline void ReplicatePutRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ReplicatePutRequest::value() const {
  // @@protoc_insertion_point(field_get:replication.ReplicatePutRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicatePutRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:replication.ReplicatePutRequest.value)
}
inline std::string* ReplicatePutRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:replication.ReplicatePutRequest.value)
  return _s;
}
inline const std::string& ReplicatePutRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ReplicatePutRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicatePutRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicatePutRequest::release_value() {
  // @@protoc_insertion_point(field_release:replication.ReplicatePutRequest.value)
  return _impl_.value_.Release();
}
inline void ReplicatePutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:replication.ReplicatePutRequest.value)
}

// -------------------------------------------------------------------

// ReplicatePutReply

// string success = 1;
inline void ReplicatePutReply::clear_success() {
  _impl_.success_.ClearToEmpty();
}
inline const std::string& ReplicatePutReply::success() const {
  // @@protoc_insertion_point(field_get:replication.ReplicatePutReply.success)
  return _internal_success();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicatePutReply::set_success(ArgT0&& arg0, ArgT... args) {
 
 _impl_.success_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:replication.ReplicatePutReply.success)
}
inline std::string* ReplicatePutReply::mutable_success() {
  std::string* _s = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:replication.ReplicatePutReply.success)
  return _s;
}
inline const std::string& ReplicatePutReply::_internal_success() const {
  return _impl_.success_.Get();
}
inline void ReplicatePutReply::_internal_set_success(const std::string& value) {
  
  _impl_.success_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplicatePutReply::_internal_mutable_success() {
  
  return _impl_.success_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplicatePutReply::release_success() {
  // @@protoc_insertion_point(field_release:replication.ReplicatePutReply.success)
  return _impl_.success_.Release();
}
inline void ReplicatePutReply::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  _impl_.success_.SetAllocated(success, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.success_.IsDefault()) {
    _impl_.success_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:replication.ReplicatePutReply.success)
}

// -------------------------------------------------------------------

// HeartbeatRequest

// string leader_id = 1;
inline void HeartbeatRequest::clear_leader_id() {
  _impl_.leader_id_.ClearToEmpty();
}
inline const std::string& HeartbeatRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:replication.HeartbeatRequest.leader_id)
  return _internal_leader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeartbeatRequest::set_leader_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.leader_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:replication.HeartbeatRequest.leader_id)
}
inline std::string* HeartbeatRequest::mutable_leader_id() {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:replication.HeartbeatRequest.leader_id)
  return _s;
}
inline const std::string& HeartbeatRequest::_internal_leader_id() const {
  return _impl_.leader_id_.Get();
}
inline void HeartbeatRequest::_internal_set_leader_id(const std::string& value) {
  
  _impl_.leader_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HeartbeatRequest::_internal_mutable_leader_id() {
  
  return _impl_.leader_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HeartbeatRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:replication.HeartbeatRequest.leader_id)
  return _impl_.leader_id_.Release();
}
inline void HeartbeatRequest::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  _impl_.leader_id_.SetAllocated(leader_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_id_.IsDefault()) {
    _impl_.leader_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:replication.HeartbeatRequest.leader_id)
}

// -------------------------------------------------------------------

// HeartbeatReply

// bool alive = 1;
inline void HeartbeatReply::clear_alive() {
  _impl_.alive_ = false;
}
inline bool HeartbeatReply::_internal_alive() const {
  return _impl_.alive_;
}
inline bool HeartbeatReply::alive() const {
  // @@protoc_insertion_point(field_get:replication.HeartbeatReply.alive)
  return _internal_alive();
}
inline void HeartbeatReply::_internal_set_alive(bool value) {
  
  _impl_.alive_ = value;
}
inline void HeartbeatReply::set_alive(bool value) {
  _internal_set_alive(value);
  // @@protoc_insertion_point(field_set:replication.HeartbeatReply.alive)
}

// string follower_id = 2;
inline void HeartbeatReply::clear_follower_id() {
  _impl_.follower_id_.ClearToEmpty();
}
inline const std::string& HeartbeatReply::follower_id() const {
  // @@protoc_insertion_point(field_get:replication.HeartbeatReply.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeartbeatReply::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follower_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:replication.HeartbeatReply.follower_id)
}
inline std::string* HeartbeatReply::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:replication.HeartbeatReply.follower_id)
  return _s;
}
inline const std::string& HeartbeatReply::_internal_follower_id() const {
  return _impl_.follower_id_.Get();
}
inline void HeartbeatReply::_internal_set_follower_id(const std::string& value) {
  
  _impl_.follower_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HeartbeatReply::_internal_mutable_follower_id() {
  
  return _impl_.follower_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HeartbeatReply::release_follower_id() {
  // @@protoc_insertion_point(field_release:replication.HeartbeatReply.follower_id)
  return _impl_.follower_id_.Release();
}
inline void HeartbeatReply::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  _impl_.follower_id_.SetAllocated(follower_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follower_id_.IsDefault()) {
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:replication.HeartbeatReply.follower_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace replication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_replication_2eproto
